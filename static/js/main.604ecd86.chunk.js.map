{"version":3,"sources":["MatchIDHeader.js","buildRequestFilter.js","buildRequest.js","runRequest.js","buildStateFacets.js","enrichRecord.js","buildState.js","CustomAutocompleteView.js","CustomSearchBox.js","SearchHeader.js","CustomResult.js","CustomResults.js","App.js","serviceWorker.js","index.js"],"names":["MatchIDHeader","toggleModal","modalState","toggleBurger","burgerState","fixed","color","transparent","Brand","Item","className","onClick","src","alt","Burger","data-target","aria-label","aria-expanded","aria-hidden","Menu","id","Container","dropdown","hoverable","Link","icon","faLightbulb","Dropdown","href","faFlask","faDatabase","faTable","show","onClose","Card","Head","Title","Body","Foot","getTermFilterValue","field","fieldValue","getTermFilter","filter","type","bool","should","values","map","filterValue","term","minimum_should_match","getRangeFilter","range","to","lt","gt","from","buildRequest","state","current","filters","resultsPerPage","searchTerm","sort","sortDirection","sortField","buildSort","match","autocomplete","date","normalize","replace","split","x","length","names_query","date_query","names","must","PRENOMS_NOM","query","join","fuzziness","PRENOM_NOM","push","NOM","PRENOMS","PRENOM","DATE_NAISSANCE","DATE_DECES","function_score","match_all","buildMatch","size","buildFrom","reduce","acc","includes","buildRequestFilter","min_score","highlight","fragment_size","number_of_fragments","fields","title","description","_source","aggs","COMMUNE_NAISSANCE","terms","PAYS_NAISSANCE","runRequest","body","a","async","fetch","method","headers","JSON","stringify","response","status","hits","total","value","_id","statusText","error","json","getValueFacet","aggregations","fieldName","buckets","data","bucket","key_as_string","key","count","doc_count","getRangeFacet","name","record","getHighlight","hit","window","buildState","results","addEachKeyValueToObject","enrichRecord","Object","entries","snippet","raw","buildResults","totalResults","totalPages","Math","ceil","buildTotalPages","facets","states","world_heritage_site","visitors","acres","keys","buildStateFacets","CustomAutocompleteView","autocompletedResults","getItemProps","style","marginLeft","marginTop","result","i","index","item","COMMUNE_DECES","PAYS_DECES","CustomSearchBox","setSearchTerm","SearchBox","autocompleteMinimumCharacters","autocompleteSuggestions","autocompleteView","inputView","getAutocomplete","getInputProps","Column","placeholder","height","width","onSelectAutocomplete","selection","SearchHeader","subtitle","CustomResult","Header","faExclamationTriangle","Content","SEXE","CustomResults","config","onResultClick","onAutocompleteResultClick","onAutocomplete","requestBody","onSearch","responseJson","App","props","errorMessage","bind","this","setState","prev","navbarBurger","Array","prototype","slice","call","document","querySelectorAll","target","dataset","$target","getElementById","classList","toggle","SearchProvider","mapContextToProps","wasSearched","ErrorBoundary","Layout","header","bodyContent","sideContent","bodyHeader","Fragment","PagingInfo","ResultsPerPage","bodyFooter","Paging","React","Component","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.604ecd86.chunk.js","sourcesContent":["import React from \"react\";\n\n// import 'react-bulma-components/dist/react-bulma-components.min.css';\n\nimport {\n    Container,\n    Content,\n    Modal,\n    Navbar\n} from 'react-bulma-components';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n    faLightbulb\n} from '@fortawesome/free-regular-svg-icons';\n\nimport {\n    faDatabase,\n    faFlask,\n    faTable\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function MatchIDHeader({toggleModal, modalState, toggleBurger, burgerState}) {\n    return (\n        <>\n            <Navbar\n                fixed={'top'}\n                color={'white'}\n                transparent={true}\n            >\n                <Container>\n                    <Navbar.Brand>\n                        <Navbar.Item className=\"logo\" onClick={toggleModal}>\n                            <img src={process.env.PUBLIC_URL + \"/matchID-logo.svg\"} alt=\"matchID Logo\" />\n                        </Navbar.Item>\n                        <Navbar.Burger\n                            onClick={toggleBurger}\n                            data-target=\"navMenu\" aria-label=\"menu\" aria-expanded=\"false\"\n                        >\n                            <span aria-hidden=\"true\"></span>\n                            <span aria-hidden=\"true\"></span>\n                            <span aria-hidden=\"true\"></span>\n                        </Navbar.Burger>\n                    </Navbar.Brand>\n\n                    <Navbar.Menu\n                        id=\"navMenu\"\n                    >\n                        <Navbar.Container>\n                            <Navbar.Item onClick={toggleModal}>\n                                &nbsp; à propos de ce service\n                            </Navbar.Item>\n                            <Navbar.Item dropdown hoverable>\n                                <Navbar.Link>\n                                    <FontAwesomeIcon icon={faLightbulb} className=\"icon is-small\"/>\n                                    &nbsp; références\n                                </Navbar.Link>\n                                <Navbar.Dropdown>\n                                    <Navbar.Item href=\"https://www.matchid.io/\">\n                                        <FontAwesomeIcon icon={faFlask} className=\"icon is-small\"/>\n                                        &nbsp; &nbsp; matchID\n                                    </Navbar.Item>\n                                    <Navbar.Item href=\"https://www.insee.fr/fr/information/4190491\">\n                                        <FontAwesomeIcon icon={faDatabase} className=\"icon is-small\"/>\n                                        &nbsp; &nbsp; source INSEE\n                                    </Navbar.Item>\n                                    <Navbar.Item href=\"https://www.data.gouv.fr/fr/datasets/fichier-des-personnes-decedees/\">\n                                        <FontAwesomeIcon icon={faTable} className=\"icon is-small\"/>\n                                        &nbsp; &nbsp; référence data.gouv\n                                    </Navbar.Item>\n                                </Navbar.Dropdown>\n                            </Navbar.Item>\n                        </Navbar.Container>\n                        </Navbar.Menu>\n                </Container>\n            </Navbar>\n            <Modal show={modalState} onClose={toggleModal}>\n                <Modal.Card>\n                    <Modal.Card.Head onClose={toggleModal}>\n                        <Modal.Card.Title>\n                            À propos de ce service\n                        </Modal.Card.Title>\n                    </Modal.Card.Head>\n                    <Modal.Card.Body>\n                        <Content>\n                        <p><strong>Conditions d'usage et garanties (version alpha)</strong></p>\n                            <p>\n                                Ce service est financé sur fonds personnels et est donc offert sans garantie.\n                                L'usage est limité à une requête par seconde afin de préserver un service pour tous. Selon\n                                l'affluence et les retours, nous envisagerons de le consolider. Contactez nous\n                                sur <a href=\"mailto:matchid.project@gmail.com\">matchid-project@gmail.com</a> pour\n                                toute question ou signaler un problème.\n                            </p>\n                            <p><strong>Fichier des personnes décédées</strong></p>\n                            <p>\n                                Ce service vise à permettre la recherche directe de personnes décédées. Il exploite la base opendata\n                                délivrée par l'<a href=\"https://www.insee.fr/fr/information/4190491\">INSEE</a> et\n                                diffusée par <a href=\"https://www.data.gouv.fr/fr/datasets/fichier-des-personnes-decedees/\">data.gouv.fr</a>.\n                            </p>\n                            <p>\n                                Ce service utilise l'intégralité des données INSEE, soit environ 25 millions d'enregistrements.\n                                Il concerne les déclarations de décès retransmises vers l'INSEE depuis 1970 jusqu'au mois précédent.\n                                Seules les personnes ayant eu un numéro INSEE et ayant fait l'objet d'une déclaration de décès, en mairie ou\n                                en consulat sont enregistrées. Le délai de déclaration et de transmission peut être variable (personnes disparues, ou\n                                recherches historiques e.g. identifications tardives après guerre).\n                            </p>\n                            <p><strong>Traitement des données avec matchID</strong></p>\n                            <p>\n                                Les données sont traitées avec l'outil opensource <a href=\"https://matchid.io\">matchID</a> (Python/Pandas). Les traitements, disponibles\n                                disponibles <a href=\"https://github.com/matchid-project/personnes-decedees_search\">ici</a>,\n                                consistent en une mise en forme (capitalisation, réconciliation avec les noms de pays et commune\n                                selon les référentiels INSEE) puis une indexation. Les données sont actualisées chaque mois, après chaque diffusion sur le\n                                site <a href=\"https://www.data.gouv.fr/fr/datasets/fichier-des-personnes-decedees/\">data.gouv.fr</a>.\n                            </p>\n                            <p>La recherche et l'indexation reposent sur <a href=\"https://elastic.co\">Elasticsearch</a>\n                            qui repose sur le moteur de recherche Lucène, qui apporte le bénéfice\n                            des <a href=\"https://wikipedia.org/wiki/Recherche_approximative\">recherches floues</a> à\n                            large échelle. La visualisation est basée\n                            sur <a href=\"https://swiftype.com/search-ui\">Search-UI</a>.\n                            Le code source est accessible sur <a href=\"https://github.com/matchid-project/personnes-decedees_search-ui\">Github</a>.\n                            </p>\n                            <p><strong>Qui sommes nous ?</strong></p>\n                            <p>\n                                Le projet matchID a été initié au ministère de l'Intérieur dans le contexte des\n                                challenges d'<a href=\"https://entrepreneur-interet-general.etalab.gouv.fr/defis/2017/mi-matchid.html\">Entrepreneur d'intérêt général</a>.\n                                La réconciliation des personnes décédées avec le permis de conduire a été le premier cas d'usage réalisé avec\n                                matchID. Le projet a été libéré et mis en opensource. Nous avons créé de service\n                                en complément qui semblait d'utilité notamment pour la lutte contre la fraude.\n                                Pour en savoir plus sur le projet matchID, suivez ce <a href=\"https://matchid.io\">lien</a>.\n                            </p>\n                        </Content>\n                    </Modal.Card.Body>\n                    <Modal.Card.Foot>\n                    </Modal.Card.Foot>\n                </Modal.Card>\n            </Modal>\n        </>\n    );\n};\n","function getTermFilterValue(field, fieldValue) {\n  // We do this because if the value is a boolean value, we need to apply\n  // our filter differently. We're also only storing the string representation\n  // of the boolean value, so we need to convert it to a Boolean.\n\n  // TODO We need better approach for boolean values\n  if (fieldValue === \"false\" || fieldValue === \"true\") {\n    return { [field]: fieldValue === \"true\" };\n  }\n\n  return { [`${field}.keyword`]: fieldValue };\n}\n\nfunction getTermFilter(filter) {\n  if (filter.type === \"any\") {\n    return {\n      bool: {\n        should: [\n          filter.values.map(filterValue => ({\n            term: getTermFilterValue(filter.field, filterValue)\n          }))\n        ],\n        minimum_should_match: 1\n      }\n    };\n  } else if (filter.type === \"all\") {\n    return {\n      bool: {\n        filter: [\n          filter.values.map(filterValue => ({\n            term: getTermFilterValue(filter.field, filterValue)\n          }))\n        ]\n      }\n    };\n  }\n}\n\nfunction getRangeFilter(filter) {\n  if (filter.type === \"any\") {\n    return {\n      bool: {\n        should: [\n          filter.values.map(filterValue => ({\n            range: {\n              [filter.field]: {\n                ...(filterValue.to && { lt: filterValue.to }),\n                ...(filterValue.to && { gt: filterValue.from })\n              }\n            }\n          }))\n        ],\n        minimum_should_match: 1\n      }\n    };\n  } else if (filter.type === \"all\") {\n    return {\n      bool: {\n        filter: [\n          filter.values.map(filterValue => ({\n            range: {\n              [filter.field]: {\n                ...(filterValue.to && { lt: filterValue.to }),\n                ...(filterValue.to && { gt: filterValue.from })\n              }\n            }\n          }))\n        ]\n      }\n    };\n  }\n}\n\nexport default function buildRequestFilter(filters) {\n  if (!filters) return;\n\n  filters = filters.reduce((acc, filter) => {\n    if ([\"states\", \"world_heritage_site\"].includes(filter.field)) {\n      return [...acc, getTermFilter(filter)];\n    }\n    if ([\"acres\", \"visitors\"].includes(filter.field)) {\n      return [...acc, getRangeFilter(filter)];\n    }\n    return acc;\n  }, []);\n\n  if (filters.length < 1) return;\n  return filters;\n}\n","import buildRequestFilter from \"./buildRequestFilter\";\n\nfunction buildFrom(current, resultsPerPage) {\n  if (!current || !resultsPerPage) return;\n  return (current - 1) * resultsPerPage;\n}\n\nfunction buildSort(sortDirection, sortField) {\n  if (sortDirection && sortField) {\n    return [{ [`${sortField}.keyword`]: sortDirection }];\n  }\n}\n\nfunction buildMatch(searchTerm, autocomplete) {\n  searchTerm = searchTerm ? searchTerm.normalize('NFKD').replace(/[\\u0300-\\u036f]/g, \"\").split(/\\s+/) : []\n  let date = searchTerm.filter( x => x.match(/^\\d{2}\\/\\d{2}\\/\\d{4}$/)).map( x => x.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/,\"$3$2$1\"));\n  date = date.length ? date[0] : null;\n  let names = searchTerm.filter( x => x.match(/[a-z]+/)).filter( x => !x.match(/^(el|d|le|de|la|los)$/))\n\n  const default_query = { match_all: {} }\n\n  let names_query\n  let date_query\n\n  if (names.length > 0) {\n    names_query = {\n      bool: {\n        must: [\n          {\n            match: {\n              PRENOMS_NOM: {\n                query: names.join(\" \"),\n                fuzziness: \"auto\"\n              }\n            }\n          }\n        ],\n        should: [\n          {\n            match: {\n              PRENOM_NOM: names.join(\" \"),\n            }\n          },\n          {\n            match: {\n              PRENOM_NOM: {\n                query: names.join(\" \"),\n                fuzziness: \"auto\"\n              }\n            }\n          }\n        ]\n      }\n    }\n\n    if (names.length === 2) {\n      names_query.bool.must.push(\n        {\n          bool: {\n            minimum_should_match: 1,\n            should: [\n              {\n                bool: {\n                  must: [\n                    {\n                      bool: {\n                        must: [\n                          {\n                            match: {\n                              NOM: {\n                                query: names[0],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          }\n                        ],\n                        should: [\n                          {\n                            match: {\n                              NOM: names[0]\n                            }\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      bool: {\n                        must: [\n                          {\n                            match: {\n                              PRENOMS: {\n                                query: names[1],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          }\n                        ],\n                        should: [\n                          {\n                            match: {\n                              PRENOM: {\n                                query: names[1],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          },\n                          {\n                            match: {\n                              PRENOM: names[1]\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                bool: {\n                  must: [\n                    {\n                      bool: {\n                        must: [\n                          {\n                            match: {\n                              NOM: {\n                                query: names[1],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          }\n                        ],\n                        should: [\n                          {\n                            match: {\n                              NOM: names[1]\n                            }\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      bool: {\n                        must: [\n                          {\n                            match: {\n                              PRENOMS: {\n                                query: names[0],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          }\n                        ],\n                        should: [\n                          {\n                            match: {\n                              PRENOM: {\n                                query: names[0],\n                                fuzziness: \"auto\"\n                              }\n                            }\n                          },\n                          {\n                            match: {\n                              PRENOM: names[0]\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      )\n    }\n  }\n\n  if (date) {\n    date_query = {\n      bool: {\n        minimum_should_match: 1,\n        should: [\n          {\n            match: {\n              DATE_NAISSANCE: {\n                query: date,\n                fuzziness: \"auto\"\n              }\n            }\n          },\n          {\n            match: {\n              DATE_DECES: {\n                query: names[1],\n                fuzziness: \"auto\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n\n  const query = date_query\n    ? names_query\n      ? {\n          function_score: {\n            query: {\n              bool: {\n                must: [ names_query ],\n                should: [ date_query ]\n              }\n            }\n          }\n        }\n      : date_query\n    : names_query\n      ?\n        names_query\n      :\n        default_query\n\n  return query\n}\n\n/*\n\n  Converts current application state to an Elasticsearch request.\n\n  When implementing an onSearch Handler in Search UI, the handler needs to take the\n  current state of the application and convert it to an API request.\n\n  For instance, there is a \"current\" property in the application state that you receive\n  in this handler. The \"current\" property represents the current page in pagination. This\n  method converts our \"current\" property to Elasticsearch's \"from\" parameter.\n\n  This \"current\" property is a \"page\" offset, while Elasticsearch's \"from\" parameter\n  is a \"item\" offset. In other words, for a set of 100 results and a page size\n  of 10, if our \"current\" value is \"4\", then the equivalent Elasticsearch \"from\" value\n  would be \"40\". This method does that conversion.\n\n  We then do similar things for searchTerm, filters, sort, etc.\n*/\nexport default function buildRequest(state) {\n  const {\n    current,\n    filters,\n    resultsPerPage,\n    searchTerm,\n    sortDirection,\n    sortField\n  } = state;\n\n  const sort = buildSort(sortDirection, sortField);\n  const match = buildMatch(searchTerm);\n  const size = resultsPerPage;\n  const from = buildFrom(current, resultsPerPage);\n  const filter = buildRequestFilter(filters);\n\n  const body = {\n    // Static query Configuration\n    // --------------------------\n    // https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-request-highlighting.html\n    min_score: 5,\n    highlight: {\n      fragment_size: 200,\n      number_of_fragments: 1,\n      fields: {\n        title: {},\n        description: {}\n      }\n    },\n    //https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-request-source-filtering.html#search-request-source-filtering\n    _source: [\n      \"CODE_INSEE_DECES\",\"CODE_INSEE_NAISSANCE\",\n      \"COMMUNE_DECES\",\"COMMUNE_NAISSANCE\",\n      \"DATE_DECES\",\"DATE_NAISSANCE\",\n      \"DEPARTEMENT_DECES\",\"DEPARTEMENT_NAISSANCE\",\n      \"NOM\",\"PRENOM\",\"PRENOMS\",\n      \"NUM_DECES\",\n      \"PAYS_DECES\",\"PAYS_DECES_CODEISO3\",\n      \"PAYS_NAISSANCE\",\"PAYS_NAISSANCE_CODEISO3\",\n      \"SEXE\",\"UID\"],\n    aggs: {\n      COMMUNE_NAISSANCE: { terms: { field: \"COMMUNE_NAISSANCE.keyword\", size: 30 } },\n      PAYS_NAISSANCE: {\n        terms: { field: \"PAYS_NAISSANCE.keyword\" }\n      }\n    },\n\n    // Dynamic values based on current Search UI state\n    // --------------------------\n    // https://www.elastic.co/guide/en/elasticsearch/reference/7.x/full-text-queries.html\n    query: {\n      bool: {\n        must: [match],\n        ...(filter && { filter })\n      }\n    },\n    // https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-request-sort.html\n    ...(sort && { sort }),\n    // https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-request-from-size.html\n    ...(size && { size }),\n    ...(from && { from })\n  };\n\n  return body;\n}\n","export default async function runRequest(body) {\n\n  const response = await fetch(`/personnes-decedees-search-ui/api/v0/search`, {\n    method: \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(body)\n  });\n  if (response.status >= 400) {\n    return {\n      hits: {\n        total: {\n          value: 1\n        },\n        hits: [\n          {\n            _id: 0,\n            _source: {\n              status: response.status,\n              statusText: response.statusText,\n              error: true\n            }\n          }\n        ]\n      }\n    };\n  } else {\n    return response.json();\n  }\n}\n","function getValueFacet(aggregations, fieldName) {\n  if (\n    aggregations &&\n    aggregations[fieldName] &&\n    aggregations[fieldName].buckets &&\n    aggregations[fieldName].buckets.length > 0\n  ) {\n    return [\n      {\n        field: fieldName,\n        type: \"value\",\n        data: aggregations[fieldName].buckets.map(bucket => ({\n          // Boolean values and date values require using `key_as_string`\n          value: bucket.key_as_string || bucket.key,\n          count: bucket.doc_count\n        }))\n      }\n    ];\n  }\n}\n\nfunction getRangeFacet(aggregations, fieldName) {\n  if (\n    aggregations &&\n    aggregations[fieldName] &&\n    aggregations[fieldName].buckets &&\n    aggregations[fieldName].buckets.length > 0\n  ) {\n    return [\n      {\n        field: fieldName,\n        type: \"range\",\n        data: aggregations[fieldName].buckets.map(bucket => ({\n          // Boolean values and date values require using `key_as_string`\n          value: {\n            to: bucket.to,\n            from: bucket.from,\n            name: bucket.key\n          },\n          count: bucket.doc_count\n        }))\n      }\n    ];\n  }\n}\n\nexport default function buildStateFacets(aggregations) {\n  const states = getValueFacet(aggregations, \"states\");\n  const world_heritage_site = getValueFacet(\n    aggregations,\n    \"world_heritage_site\"\n  );\n  const visitors = getRangeFacet(aggregations, \"visitors\");\n  const acres = getRangeFacet(aggregations, \"acres\");\n\n  const facets = {\n    ...(states && { states }),\n    ...(world_heritage_site && { world_heritage_site }),\n    ...(visitors && { visitors }),\n    ...(acres && { acres })\n  };\n\n  if (Object.keys(facets).length > 0) {\n    return facets;\n  }\n}\n","// specific mapping for fichier-des-personnes-decedees\nexport default function(record) {\n    record._source.id = record._id\n    if (!record._source.PRENOM) {\n        record._source.PRENOM = \"\";\n    }\n    if (!record._source.PRENOMS) {\n        record._source.PRENOMS = \"\";\n    }\n    return record\n}","import buildStateFacets from \"./buildStateFacets\";\n\nimport enrichRecord from \"./enrichRecord\";\n\nfunction buildTotalPages(resultsPerPage, totalResults) {\n  if (!resultsPerPage) return 0;\n  if (totalResults === 0) return 1;\n  return Math.ceil(totalResults / resultsPerPage);\n}\n\nfunction buildTotalResults(hits) {\n  return hits.total.value;\n}\n\nfunction getHighlight(hit, fieldName) {\n  if (hit._source.title === \"Rocky Mountain\" && fieldName === \"title\") {\n    window.hit = hit;\n    window.fieldName = fieldName;\n  }\n  if (\n    !hit.highlight ||\n    !hit.highlight[fieldName] ||\n    hit.highlight[fieldName].length < 1\n  ) {\n    return;\n  }\n\n  return hit.highlight[fieldName][0];\n}\n\nfunction buildResults(hits) {\n  const addEachKeyValueToObject = (acc, [key, value]) => ({\n    ...acc,\n    [key]: value\n  });\n\n  const toObject = (value, snippet) => {\n    return { raw: value, ...(snippet && { snippet }) };\n  };\n\n  // console.log(\"hits:\",hits);\n  return hits.map(enrichRecord).map(record => {\n    return Object.entries(record._source)\n      .map(([fieldName, fieldValue]) => [\n        fieldName,\n        toObject(fieldValue, getHighlight(record, fieldName))\n      ])\n      .reduce(addEachKeyValueToObject, {});\n  });\n}\n\n/*\n  Converts an Elasticsearch response to new application state\n\n  When implementing an onSearch Handler in Search UI, the handler needs to convert\n  search results into a new application state that Search UI understands.\n\n  For instance, Elasticsearch returns \"hits\" for search results. This maps to\n  the \"results\" property in application state, which requires a specific format. So this\n  file iterates through \"hits\" and reformats them to \"results\" that Search UI\n  understands.\n\n  We do similar things for facets and totals.\n*/\nexport default function buildState(response, resultsPerPage) {\n  const results = buildResults(response.hits.hits);\n  const totalResults = buildTotalResults(response.hits);\n  const totalPages = buildTotalPages(resultsPerPage, totalResults);\n  const facets = buildStateFacets(response.aggregations);\n\n  return {\n    results,\n    totalPages,\n    totalResults,\n    ...(facets && { facets })\n  };\n}\n","import React from \"react\";\n\nimport {\n  Container,\n  Table\n} from 'react-bulma-components';\n\n\n\nfunction CustomAutocompleteView({\n  autocompletedResults,\n  getItemProps,\n}) {\n  return (\n    <div className=\"sui-search-box__autocomplete-container\">\n      <Container style={{marginLeft: \"15px\", marginTop: \"-20px\"}} className=\"is-widescreen\">\n        <span className=\"is-uppercase is-size-7 is-small has-text-grey\">\n          Résultats\n        </span>\n\n        <Table className=\"is-narrow\">\n          <thead>\n            <tr className=\"is-uppercase\">\n              <td className=\"is-size-7 is-small has-text-grey\"> Prénom Nom </td>\n              <td className=\"is-size-7 is-small has-text-grey\"> Naissance </td>\n              <td className=\"is-size-7 is-small has-text-grey\"> Décès </td>\n            </tr>\n          </thead>\n          <tbody>\n            {!!autocompletedResults && autocompletedResults.map((result, i) => (\n              <tr className=\"is-size-7 is-hoverable\"\n                {...getItemProps({\n                  key: result.id.raw,\n                  index: i,\n                  item: result\n                })}\n              >\n                <td>\n                  {result.PRENOM.raw} {result.NOM.raw}\n                </td>\n                <td>\n                  {result.DATE_NAISSANCE.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")\n                  } {\n                  result.COMMUNE_NAISSANCE\n                  ? \"- \" + result.COMMUNE_NAISSANCE.raw\n                  : result.PAYS_NAISSANCE\n                    ? \"- \" + result.PAYS_NAISSANCE.raw\n                    : \"\"\n                  }\n                </td>\n                <td>\n                  {result.DATE_DECES.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")\n                  } {\n                    result.COMMUNE_DECES\n                    ? \"- \" + result.COMMUNE_DECES.raw\n                    : result.PAYS_DECES\n                      ? \"- \" + result.PAYS_DECES.raw\n                      : \"\"\n                    }\n                </td>\n              </tr>\n              )\n            )}\n          </tbody>\n        </Table>\n      </Container>\n    </div>\n  );\n}\n\nexport default CustomAutocompleteView;\n\n","import React from \"react\";\n\nimport {\n  Button,\n  Columns,\n  Container\n} from 'react-bulma-components';\n\nimport { SearchBox } from \"@elastic/react-search-ui\";\nimport CustomAutocompleteView from \"./CustomAutocompleteView\";\n\nexport default function CustomSearchBox({setSearchTerm}) {\n    return (\n    <SearchBox\n        autocompleteMinimumCharacters={3}\n        autocompleteSuggestions={true}\n        autocompleteView={CustomAutocompleteView}\n        inputView={({ getAutocomplete, getInputProps }) => (\n          <Container className=\"column is-6\" style={{marginTop: \"-15px\"}}>\n            <Columns className=\"is-vcentered\">\n              <Columns.Column size={9}>\n                <input\n                    {...getInputProps({\n                    placeholder: \"prénom, nom, date de naissance ou de décès, ... e.g. Georges Pompidou\"\n                    })}\n                    className=\"is-size-5 is-fullwidth\"\n                    style={{height: \"2.35em\",width:\"100%\"}}\n                />\n                {getAutocomplete()}\n              </Columns.Column>\n              <Columns.Column size={3}>\n                <Button\n                  className=\"is-size-5 is-fullwidth\"\n                  color=\"info\"\n                >\n                  Recherche\n                </Button>\n              </Columns.Column>\n            </Columns>\n          </Container>\n      )}\n      onSelectAutocomplete={(selection) => {\n        setSearchTerm(selection.PRENOM.raw + \" \" + selection.NOM.raw + \" \" +\n          selection.DATE_NAISSANCE.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")\n        )\n      }}\n    />\n  )}","import React from \"react\";\n\nimport {\n  Heading,\n  Hero\n} from 'react-bulma-components';\n\nimport CustomSearchBox from \"./CustomSearchBox\";\n\nexport default function SearchHeader({setSearchTerm}) {\n    return (\n      <Hero>\n        <Heading style={{color: \"#fff\"}}>\n          fichier des décès\n        </Heading>\n        <Heading subtitle style={{color: \"#fff\"}}>\n          <a\n            href=\"https://www.insee.fr/fr/information/4190491\"\n          > source INSEE </a>\n        </Heading>\n        <CustomSearchBox setSearchTerm={setSearchTerm}/>\n      </Hero>\n    )\n};\n","import React from \"react\";\n\nimport {\n  Card,\n  Columns,\n  Content,\n  Container,\n  Heading,\n  Image,\n  Table\n} from 'react-bulma-components';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n    faExclamationTriangle\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function CustomResult({result}) {\n    if (result.error) {\n        return (\n            <Columns.Column size={12}>\n            <Card>\n                <Card.Header className=\"has-background-danger\">\n                    <Container className=\"is-fluid\">\n                    <Columns className=\"is-vcentered\">\n                        <Columns.Column size={3}>\n                            <FontAwesomeIcon icon={faExclamationTriangle} size=\"4x\" className=\"is-pulled-left\"/>\n                        </Columns.Column>\n                        <Columns.Column size={6}>\n                            <Heading className=\"has-text-white has-text-centered\">Erreur {result.status.raw}</Heading>\n                            <Heading subtitle className=\"has-text-white has-text-centered\">\n                                {result.statusText.raw}\n                            </Heading>\n                        </Columns.Column>\n                    </Columns>\n                    </Container>\n                </Card.Header>\n                <Card.Content>\n                    <Content>\n                        {result.status.raw === 429\n                            ? \"Le service est momentanément saturé, veuillez réessayer.\"\n                            : \"Erreur de service. Le service est en version alpha, à ce stade tous les cas d'erreur ne sont pas gérés. Si l'erreur perdure, veuillez nous contacter matchid.result@gmail.com\"\n                        }\n                    </Content>\n                </Card.Content>\n            </Card>\n        </Columns.Column>\n        )\n    } else {\n        return (\n            <Columns.Column size={12}>\n                <Card>\n                    <Card.Header className=\"has-background-primary\">\n                        <Columns className=\"is-vcentered is-mobile\">\n                            <Columns.Column size={3}>\n                                <Image\n                                    size={64} alt=\"64x64\"\n                                    src={ result.SEXE.raw === 'M' ? '/male.svg' : '/female.svg' }\n                                />\n                            </Columns.Column>\n                            <Columns.Column size={9} >\n                                <Heading size={4} className=\"has-text-white\">{result.PRENOM.raw} {result.NOM.raw}</Heading>\n                                <Heading subtitle size={6} className=\"has-text-white\">\n                                    {result.DATE_NAISSANCE.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")}\n                                    &nbsp; - &nbsp;\n                                    {result.DATE_DECES.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")}\n                                </Heading>\n                            </Columns.Column>\n                        </Columns>\n                    </Card.Header>\n                    <Card.Content>\n                        <Content>\n                            <Columns>\n                                <Columns.Column size={6}>\n                                    <span className=\"is-grey is-uppercase is-small\">Naissance</span>\n                                    <Table className=\"is-narrow\">\n                                        <tbody>\n                                            <tr>\n                                                <td>Nom</td>\n                                                <td>{result.NOM.raw}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Prénoms</td>\n                                                <td>{result.PRENOMS.raw}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Date</td>\n                                                <td>{result.DATE_NAISSANCE.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Lieu</td>\n                                                <td>\n                                                    {result.COMMUNE_NAISSANCE\n                                                    ? result.PAYS_NAISSANCE\n                                                        ? result.COMMUNE_NAISSANCE.raw + \", \" + result.PAYS_NAISSANCE.raw\n                                                        : result.COMMUNE_NAISSANCE\n                                                    : result.PAYS_NAISSANCE\n                                                        ? result.PAYS_NAISSANCE.raw\n                                                        : \"ND\"\n                                                    }\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </Columns.Column>\n                                <Columns.Column size={6}>\n                                    <span className=\"is-grey is-uppercase is-small\">Décès</span>\n                                    <Table className=\"is-narrow\">\n                                        <tbody>\n                                            <tr>\n                                                <td>Date</td>\n                                                <td>{result.DATE_DECES.raw.replace(/(\\d{4})(\\d{2})(\\d{2})/,\"$3/$2/$1\")}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Lieu</td>\n                                                <td>\n                                                    {\n                                                    result.COMMUNE_DECES\n                                                    ? ( result.PAYS_DECES\n                                                        ? result.COMMUNE_DECES.raw + \", \" + result.PAYS_DECES.raw\n                                                        : result.COMMUNE_DECES.raw )\n                                                    : (result.PAYS_DECES\n                                                        ? result.PAYS_DECES.raw\n                                                        : \"ND\")\n                                                    }\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </Columns.Column>\n                            </Columns>\n                        </Content>\n                    </Card.Content>\n                </Card>\n            </Columns.Column>\n        )\n    }\n}\n\n\n","import React from \"react\";\n\nimport {\n  Columns,\n  Container,\n} from 'react-bulma-components';\n\nimport CustomResult from \"./CustomResult\";\n\nexport default function CustomResults(results) {\n    return(\n        <Container>\n          <Columns>\n            { !!results &&\n                results.map((result, i) => {\n                    return (\n                        <CustomResult key={i} result={result} />\n                    )\n                    }\n                )\n            }\n          </Columns>\n        </Container>\n    )\n}\n","import React from \"react\";\n\nimport MatchIDHeader from \"./MatchIDHeader\"\n\nimport {\n  ErrorBoundary,\n  // Facet,\n  SearchProvider,\n  WithSearch,\n  // Results,\n  PagingInfo,\n  ResultsPerPage,\n  Paging,\n  // Sorting\n} from \"@elastic/react-search-ui\";\nimport {\n  Layout,\n  // SingleSelectFacet\n} from \"@elastic/react-search-ui-views\";\n// import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport \"./App.css\";\n\nimport buildRequest from \"./buildRequest\";\nimport runRequest from \"./runRequest\";\n// import applyDisjunctiveFaceting from \"./applyDisjunctiveFaceting\";\nimport buildState from \"./buildState\";\nimport SearchHeader from \"./SearchHeader\";\nimport CustomResults from \"./CustomResults\";\n\nconst config = {\n  // debug: true,\n  // hasA11yNotifications: true,\n  onResultClick: () => {\n    /* Not implemented */\n  },\n  onAutocompleteResultClick: () => {\n    /* Not implemented */\n  },\n  onAutocomplete: async ({ searchTerm }) => {\n    const requestBody = buildRequest({ searchTerm });\n    const json = await runRequest(requestBody);\n    const state = buildState(json);\n    return {\n      autocompletedResults: state.results\n    };\n  },\n  onSearch: async state => {\n    const { resultsPerPage } = state;\n    const requestBody = buildRequest(state);\n    // Note that this could be optimized by running all of these requests\n    // at the same time. Kept simple here for clarity.\n    const responseJson = await runRequest(requestBody);\n    // const responseJsonWithDisjunctiveFacetCounts = await applyDisjunctiveFaceting(\n    //   responseJson,\n    //   state,\n    //   [\"PAYS_NAISSANCE\", \"COMMUNE_NAISSANCE\"]\n    // );\n    return buildState(responseJson, resultsPerPage);\n    // return buildState(responseJsonWithDisjunctiveFacetCounts, resultsPerPage);\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalState: false,\n      burgerState: false,\n      errorMessage: false\n    };\n\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleBurger = this.toggleBurger.bind(this);\n  }\n\n  toggleModal() {\n    this.setState((prev, props) => {\n      const newState = ! prev.modalState;\n\n      return { modalState: newState };\n    })\n  }\n\n  toggleBurger() {\n    const navbarBurger = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0)[0];\n\n    // Get the target from the \"data-target\" attribute\n    const target = navbarBurger.dataset.target;\n    const $target = document.getElementById(target);\n\n    // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\n    navbarBurger.classList.toggle('is-active');\n    $target.classList.toggle('is-active');\n\n    this.setState((prev, props) => {\n      const newState = ! prev.burgerState;\n      return { burgerState: newState };\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <MatchIDHeader\n          toggleModal={this.toggleModal}\n          modalState={this.state.modalState}\n          toggleBurger={this.toggleBurger}\n          burgerState={this.state.burgerState}\n        />\n        <SearchProvider config={config}>\n        <WithSearch mapContextToProps={({ setSearchTerm, wasSearched, results }) => ({ setSearchTerm, wasSearched, results })}>\n          {({ setSearchTerm, wasSearched, results }) => (\n            <div className=\"App\">\n              <ErrorBoundary>\n                <Layout\n                  header={SearchHeader({setSearchTerm})}\n\n                  bodyContent={CustomResults(results)}\n                  sideContent={null}\n                  bodyHeader={\n                    <React.Fragment>\n                      {wasSearched && <PagingInfo />}\n                      {wasSearched && <ResultsPerPage />}\n                    </React.Fragment>\n                  }\n\n                  bodyFooter={<Paging />}\n                />\n              </ErrorBoundary>\n            </div>\n          )}\n        </WithSearch>\n      </SearchProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}